name: Docker CI Pipeline

# Déclencheur : chaque fois qu'un push ou une PR est effectué sur la branche main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise un environnement Ubuntu pour exécuter la pipeline

    steps:
    # 1. Checkout du code source
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Configurer Docker Buildx (outil de construction avancée pour Docker)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Construire l'image Docker à partir de ton Dockerfile
    - name: Build Docker image
      run: |
        docker build -t my-app-image .

    # 4. Compresser l'image Docker en fichier .tar.gz
    - name: Save Docker image to .tar.gz
      run: |
        docker save my-app-image -o my-app-image.tar
        gzip my-app-image.tar

    # 5. Lancer un registre Docker local (si nécessaire)
    - name: Run local Docker registry
      run: |
        docker run -d -p 5000:5000 --name registry registry:2

    # 6. Taguer l'image Docker pour le registre local
    - name: Tag Docker image for local registry
      run: |
        docker tag my-app-image localhost:5000/my-app-image

    # 7. Pousser l'image Docker vers le registre local
    - name: Push Docker image to local registry
      run: |
        docker push localhost:5000/my-app-image

    # 8. Optionnel : Tester l'image Docker après avoir été poussée
    - name: Pull and test Docker image from local registry
      run: |
        docker pull localhost:5000/my-app-image
        docker run --rm localhost:5000/my-app-image pytest test.py  # Adapter selon tes tests

    # 9. Nettoyer le registre local après utilisation
    - name: Clean up local registry
      run: |
        docker rm -f registry
